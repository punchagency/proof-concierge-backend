generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int            @id @default(autoincrement())
  username             String         @unique
  password             String
  name                 String
  email                String?
  role                 UserRole       @default(ADMIN)
  avatar               String?
  isActive             Boolean        @default(true)
  fcmToken             String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  sentMessages         Message[]      @relation("SentMessages")
  receivedMessages     Message[]      @relation("ReceivedMessages")
  assignedQueries      DonorQuery[]   @relation("AssignedToUser")
  resolvedQueries      DonorQuery[]   @relation("ResolvedByUser")
  transferredQueries   DonorQuery[]   @relation("TransferredToUser")
  callSessions        CallSession[]
}

model DonorQuery {
  id                  Int            @id @default(autoincrement())
  sid                 String
  donor               String
  donorId             String
  test                String
  stage               String
  queryMode           QueryMode      @default(TEXT)
  device              String
  status              QueryStatus    @default(IN_PROGRESS)
  fcmToken            String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  transferredTo       String?
  transferredToUserId Int?
  resolvedById        Int?
  transferNote        String?
  assignedToId        Int?
  messages            Message[]
  assignedToUser      User?          @relation("AssignedToUser", fields: [assignedToId], references: [id])
  resolvedByUser      User?          @relation("ResolvedByUser", fields: [resolvedById], references: [id])
  transferredToUser   User?          @relation("TransferredToUser", fields: [transferredToUserId], references: [id])
  callSessions       CallSession[]
}

model Message {
  id            Int       @id @default(autoincrement())
  content       String
  queryId       Int?
  isFromAdmin   Boolean   @default(false)
  senderId      Int?
  recipientId   Int?
  fcmToken      String?
  callSessionId Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  messageType   MessageType @default(QUERY)
  callMode      CallMode?
  roomName      String?
  userToken     String?

  // Relations
  query         DonorQuery?    @relation(fields: [queryId], references: [id])
  sender        User?          @relation("SentMessages", fields: [senderId], references: [id])
  recipient     User?          @relation("ReceivedMessages", fields: [recipientId], references: [id])
  callSession   CallSession?   @relation(fields: [callSessionId], references: [id])

  @@index([queryId])
  @@index([senderId])
  @@index([recipientId])
  @@index([callSessionId])
}

model CallSession {
  id          Int      @id @default(autoincrement())
  queryId     Int
  adminId     Int
  roomName    String   @unique
  mode        CallMode
  status      CallStatus
  startedAt   DateTime?
  endedAt     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userToken   String?
  adminToken  String?

  // Relations
  query       DonorQuery @relation(fields: [queryId], references: [id])
  admin       User       @relation(fields: [adminId], references: [id])
  messages    Message[]

  @@index([queryId])
  @@index([adminId])
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
}

enum QueryMode {
  TEXT
  HUDDLE
  VIDEO_CALL
}

enum QueryStatus {
  IN_PROGRESS
  PENDING_REPLY
  RESOLVED
  TRANSFERRED
}

enum CallMode {
  VIDEO
  AUDIO
  SCREEN
}

enum MessageType {
  QUERY
  CHAT
  SYSTEM
  CALL_STARTED
  CALL_ENDED
}

enum CallStatus {
  CREATED
  STARTED
  ENDED
}
