generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model User {
  id                 Int           @id @default(autoincrement())
  username           String        @unique
  password           String
  name               String
  email              String?
  role               UserRole      @default(ADMIN)
  avatar             String?
  isActive           Boolean       @default(true)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  fcmToken           String?
  callSessions       CallSession[]
  assignedQueries    DonorQuery[]  @relation("AssignedToUser")
  resolvedQueries    DonorQuery[]  @relation("ResolvedByUser")
  transferredQueries DonorQuery[]  @relation("TransferredToUser")
  receivedMessages   Message[]     @relation("ReceivedMessages")
  sentMessages       Message[]     @relation("SentMessages")
  callRequests       CallRequest[] @relation("AdminCallRequests")
}

model DonorQuery {
  id                  Int           @id @default(autoincrement())
  donor               String
  donorId             String
  test                String
  stage               String
  device              String
  status              QueryStatus   @default(IN_PROGRESS)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  transferredTo       String?
  transferredToUserId Int?
  resolvedById        Int?
  transferNote        String?
  assignedToId        Int?
  fcmToken            String?
  callSessions        CallSession[]
  assignedToUser      User?         @relation("AssignedToUser", fields: [assignedToId], references: [id])
  resolvedByUser      User?         @relation("ResolvedByUser", fields: [resolvedById], references: [id])
  transferredToUser   User?         @relation("TransferredToUser", fields: [transferredToUserId], references: [id])
  messages            Message[]
  callRequests        CallRequest[] @relation("QueryCallRequests")
}

model Message {
  id            Int          @id @default(autoincrement())
  content       String
  isFromAdmin   Boolean      @default(false)
  senderType    SenderType   @default(ADMIN)
  createdAt     DateTime     @default(now())
  queryId       Int?
  callSessionId Int?
  updatedAt     DateTime     @updatedAt
  fcmToken      String?
  recipientId   Int?
  senderId      Int?
  donorId       String?
  donorName     String?
  donorInfo     Json?
  roomName      String?
  messageType   MessageType  @default(QUERY)
  userToken     String?
  adminToken    String?
  callRequestId Int?
  callSession   CallSession? @relation(fields: [callSessionId], references: [id])
  query         DonorQuery?  @relation(fields: [queryId], references: [id])
  recipient     User?        @relation("ReceivedMessages", fields: [recipientId], references: [id])
  sender        User?        @relation("SentMessages", fields: [senderId], references: [id])
  callRequest   CallRequest? @relation(fields: [callRequestId], references: [id])

  @@index([queryId])
  @@index([senderId])
  @@index([recipientId])
  @@index([callSessionId])
  @@index([callRequestId])
  @@index([donorId])
}

model CallSession {
  id         Int        @id @default(autoincrement())
  queryId    Int
  adminId    Int
  roomName   String     @unique
  startedAt  DateTime?
  endedAt    DateTime?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  status     CallStatus
  adminToken String?
  userToken  String?
  admin      User       @relation(fields: [adminId], references: [id])
  query      DonorQuery @relation(fields: [queryId], references: [id])
  messages   Message[]

  @@index([queryId])
  @@index([adminId])
}

model CallRequest {
  id        Int               @id @default(autoincrement())
  queryId   Int
  adminId   Int?
  message   String?
  status    CallRequestStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  query     DonorQuery        @relation("QueryCallRequests", fields: [queryId], references: [id], onDelete: Cascade)
  admin     User?             @relation("AdminCallRequests", fields: [adminId], references: [id])
  messages  Message[]

  @@index([queryId])
  @@index([adminId])
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
}

enum QueryStatus {
  IN_PROGRESS
  PENDING_REPLY
  RESOLVED
  TRANSFERRED
}

enum MessageType {
  QUERY
  CHAT
  SYSTEM
  CALL_STARTED
  CALL_ENDED
}

enum CallStatus {
  CREATED
  STARTED
  ENDED
}

enum CallRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

enum SenderType {
  ADMIN
  DONOR
  SYSTEM
}
